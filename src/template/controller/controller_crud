<?php

namespace controller\{{schema}};

use DateTime;
use Exception;
use pukoframework\middleware\Service;
use pukoframework\Request;

/**
 * #Template html false
 */
class {{entity}} extends Service
{

    /**
     * @throws Exception
     * @auth bearer true
     */
    public function create()
    {
        $param = Request::JsonBody();

        //validations: empty check
{{validations}}

        //validations: customize here

        //insert
        ${{entity}} = new \plugins\model\{{schema}}\{{entity}}();
{{vars}}

        $transaction = \pukoframework\pda\DBI::Transactional(function($dbi) use (${{entity}}) {
            //save or update here
            ${{entity}}->save();

            //don't forget to process another data related to this table schema

            //don't forget to return true or false as commit flag for transaction.
            return true;
        });

        //response
        $data['{{entity}}'] = [
    {{responses}}
        ];
        $data['transaction'] = $transaction;

        return $data;
    }

    /**
     * @param string $id
     * @return mixed
     * @throws Exception
     * @auth bearer true
     */
    public function update($id = '')
    {
        $param = Request::JsonBody();

        //validations: empty check
{{validations}}

        //validations: customize here

        //update
        ${{entity}} = new \plugins\model\{{schema}}\{{entity}}($id);
{{vars}}

        $transaction = \pukoframework\pda\DBI::Transactional(function($dbi) use (${{entity}}) {
            //save or update here
            ${{entity}}->modify();

            //don't forget to process another data related to this table schema

            //don't forget to return true or false as commit flag for transaction.
            return true;
        });

        //response
        $data['{{entity}}'] = [
    {{responses}}
        ];
        $data['transaction'] = $transaction;

        return $data;
    }

    /**
     * @param string $id
     * @throws Exception
     * @auth bearer true
     */
    public function delete($id = '')
    {
        ${{entity}} = new \plugins\model\{{schema}}\{{entity}}($id);

        $transaction = \pukoframework\pda\DBI::Transactional(function($dbi) use (${{entity}}) {
            //delete logic here

            //don't forget to delete data related to this table schema

            //don't forget to return true or false as commit flag for transaction.
            return true;
        });

        return [
            'deleted' => $transaction
        ];
    }

    /**
     * @return array
     * @throws Exception
     */
    public function explore()
    {
        $keyword = [];

        $param = Request::JsonBody();
        //post addition filter here

        return \model\{{schema}}\{{entity}}Contracts::SearchDataPagination($keyword);
    }

    /**
     * @return mixed
     * @throws Exception
     */
    public function search()
    {
        $keyword = [];

        $param = Request::JsonBody();
        //post addition filter here

        $data['{{entity}}'] = \model\{{schema}}\{{entity}}Contracts::SearchData($keyword);
        return $data;
    }

    /**
     * @return array|mixed
     * @throws Exception
     */
    public function table()
    {
        $keyword = [];

        //post addition filter here

        return \model\{{schema}}\{{entity}}Contracts::GetDataTable($keyword);
    }

    /**
     * @param string $id
     * @return mixed
     * @throws Exception
     */
    public function read($id = '')
    {
        ${{entity}} = new \plugins\model\{{schema}}\{{entity}}($id);

        //response
        $data['{{entity}}'] = [
    {{responses}}
        ];

        return $data;
    }

}
